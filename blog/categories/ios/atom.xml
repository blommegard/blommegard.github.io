<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | Simon Blommegård]]></title>
  <link href="http://blommegard.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://blommegard.github.io/"/>
  <updated>2014-01-31T03:50:58-08:00</updated>
  <id>http://blommegard.github.io/</id>
  <author>
    <name><![CDATA[Simon Blommegård]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A take on custom transitions with UINavigationController]]></title>
    <link href="http://blommegard.github.io/blog/2014/01/31/a-take-on-custom-transitions-with-uinavigationcontroller/"/>
    <updated>2014-01-31T02:29:00-08:00</updated>
    <id>http://blommegard.github.io/blog/2014/01/31/a-take-on-custom-transitions-with-uinavigationcontroller</id>
    <content type="html"><![CDATA[<p>There exists a lot of great posts about how to create custom view controller transitions for <code>UINavigarionController</code> with the new API:s in iOS7, for example this by <a href="http://www.objc.io/issue-5/view-controller-transitions.html">objc.io</a>.
This works fine, most of the time. However, if you want to have the default behavour, <a href="https://developer.apple.com/library/IOs/documentation/UIKit/Reference/UINavigationControllerDelegate_Protocol/Reference/Reference.html">Apple tells us</a> that you just return nil from the delegate methods <code>…animationControllerForOperation:…</code> &amp; <code>…interactionControllerForAnimationController:…</code>. This only sort of works. You get the correct animation controller features, but the interactive part is long gone. In my project I want the majority of view controllers pushed the default way (and of course with the interactive part as well) but one with my own transition.</p>

<p>I want the result to feel like the real deal, and to write the pan-logic is not tempring at all, so I started to investigate. If we have a look att the <code>interactivePopGestureRecognizer</code> property of <code>UINavigationController</code> it holds a target of the class <a href="https://github.com/nst/iOS-Runtime-Headers/blob/master/Frameworks/UIKit.framework/_UINavigationInteractiveTransition.h"><code>_UINavigationInteractiveTransition</code></a>, wich is a subclass of <a href="https://github.com/nst/iOS-Runtime-Headers/blob/master/Frameworks/UIKit.framework/_UINavigationInteractiveTransitionBase.h"><code>_UINavigationInteractiveTransitionBase</code></a>, on this one we find the property <a href="https://github.com/nst/iOS-Runtime-Headers/blob/master/Frameworks/UIKit.framework/_UINavigationInteractiveTransitionBase.h#L42"><code>animationController</code></a>, bingo! We return that in <code>…animationControllerForOperation:…</code>, but still no luck.</p>

<p>If we look even more on our <code>interactivePopGestureRecognizer</code> property it looks like everything should be ok, it is enabled, got a valid vew in the view hierarchy and a valid target/action. I still have no idea why it does not fire (checked by adding another target/action).</p>

<p>What I ended up doing was creating a new instance of a <code>UIScreenEdgePanGestureRecognizer</code>, configure it with the left edge and set the exact same target/action as our <code>interactivePopGestureRecognizer</code>, with other words, the instance of <code>_UINavigationInteractiveTransition</code> and the action <code>handleNavigationTransition:</code>. And finally add it to the <code>UINavigationController</code>s view.
There is a bit of <code>-valueForKey:</code>and <code>NSSelectorFromString()</code> in the final solution that I am not very proud of, but it works perfectly. Remember to be safe when implementing a solution like this, Apple change stuffs, as we all know.</p>

<p>I’m <a href="http://twitter.com/blommegard">@blommegard</a> on Twitter, ping me with feedback or if I have missed something obvious. :)</p>
]]></content>
  </entry>
  
</feed>
